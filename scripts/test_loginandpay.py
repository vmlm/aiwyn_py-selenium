# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import TimeoutException

class TestLoginandpay():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self):
    self.driver.quit()
  
  def test_loginandpay(self):
    self.driver.get("https://qaplaywright.aiwyn-dev.app/client-portal/login")

    email_field = WebDriverWait(self.driver, 10).until(
        ec.element_to_be_clickable((By.NAME, "email"))
    )
    email_field.send_keys('qa@aiwyn.ai')

    password_field = WebDriverWait(self.driver, 10).until(
        ec.element_to_be_clickable((By.NAME, "password"))
    )
    password_field.send_keys('password1')

    login_button = WebDriverWait(self.driver, 10).until(
        ec.element_to_be_clickable((By.ID, 'loginButton'))
    )
    login_button.click()

    # Check for available invoices before continuing.
    try:
      checkboxes = WebDriverWait(self.driver, 10).until(
        ec.presence_of_all_elements_located((By.NAME, 'checkbox'))
      )
      checkboxes[0].click()
    except TimeoutException:
      print("Test could not continue: No available invoices.")
      return

    
    WebDriverWait(self.driver, 30).until(
      ec.presence_of_element_located((By.CSS_SELECTOR, ".mat-row:nth-child(1) .form-checkbox__input"))
    ).click()


    selected_invoice_amount = WebDriverWait(self.driver, 30).until(
      ec.presence_of_element_located((By.CSS_SELECTOR, ".mat-row:nth-child(1) .mat-column-amount"))
    ).text

    sidebar_total_amount = WebDriverWait(self.driver, 10).until(
        ec.visibility_of_element_located((By.CSS_SELECTOR, '[data-cy="side-bar-total-amount"]'))
    ).text

    # Assert that the amount to be paid equals the amount of the selected invoice.
    assert selected_invoice_amount == sidebar_total_amount, f"Assertion failed: Expected side bar total ({sidebar_total_amount} to equal selected invoice amount ({selected_invoice_amount}))"

    WebDriverWait(self.driver, 10).until(
        ec.element_to_be_clickable((By.CSS_SELECTOR, '[data-cy="pay-now"]'))
    ).click()


    # Assert that the successful payment modal window apears after payment.
    try:
      WebDriverWait(self.driver, 10).until(
        ec.presence_of_element_located((By.XPATH, '//p[text()="Thanks for paying!"]'))
    ).click()
    except TimeoutException:
      print(f"Assertion failed: Didn't get the expected payment successful modal window. Expected the text 'Thanks for paying!'")  
      return

    WebDriverWait(self.driver, 10).until(
        ec.element_to_be_clickable((By.CSS_SELECTOR, '[data-cy="close-modal-button"]'))
    ).click()

    WebDriverWait(self.driver, 10).until(
        ec.element_to_be_clickable((By.LINK_TEXT, "Payments"))
    ).click()

    WebDriverWait(self.driver, 10).until(
        ec.presence_of_all_elements_located((By.CSS_SELECTOR, ".mat-column-amount"))
    )

    try:
      payment_amount = WebDriverWait(self.driver, 10).until(
        ec.presence_of_element_located((By.CSS_SELECTOR, ".mat-row:nth-child(1) .mat-column-amount"))
      ).text
    except: 
      print('Test could not continue: No payments listed in the payments table')
      return
    
    assert selected_invoice_amount == payment_amount, f"Assertion failed: Expected the selected invoice amount ({selected_invoice_amount}) to equal the first payment amount listed in the payments table({payment_amount})"

    print('test finished successfully!')
      
if __name__ == "__main__":
    test = TestLoginandpay()
    test.setup_method()
    test.test_loginandpay()
    test.teardown_method()

  
